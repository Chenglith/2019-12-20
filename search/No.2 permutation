也是一种经典的backtrack回溯法的问题。
46题： 、对一个列表进行全排列：
代码：
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        result = []
        def dfs(nums, tmp):
            if not nums:
                result.append(tmp)
                return
            for i in range(len(nums)):
                dfs(nums[:i]+nums[i+1:], tmp+[nums[i]])
        dfs(nums,[])
        return result
回溯问题的框架：


result = []
def backtrack(路径, 选择列表):
    if 满足结束条件:
        result.add(路径)
        return
    
    for 选择 in 选择列表:
        做选择
        backtrack(路径, 选择列表)
        撤销选择


利用这个模板来解决47题：
有重复的列表的全排列
class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        result = []
        def backtrack(nums, tmp):
            if not nums:
                if tmp not in result:======================就这两行代码不一样
                    result.append(tmp)=====================
                    return
            for i in range(len(nums)):
                backtrack(nums[:i] + nums[i+1:],tmp+[nums[i]])
        backtrack(nums,[])
        return result
但是这个代码时间很长，所以不是很好。
（看了下答案感觉都差不多，所以应该没有什么问题就这样就可以了）

784 简单难度：给定一个字符串S，通过将字符串S中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。
就是将一个字符串字母大写变小写，然后数字不变。我发现简单的问题我都不太会回答，尤其这样的，
class Solution:
    def letterCasePermutation(self, S: str) -> List[str]:
        result =[]
        if len(S) ==0:
            return [""]
        def backtrack(s,tmp):
            if s>=len(S) or len(tmp) ==len(S):
                result.append(tmp)
                return
            if S[s].isdigit():
                backtrack(s+1,tmp+S[s])
            elif S[s].islower():
                backtrack(s + 1, tmp + S[s])
                backtrack(s+ 1, tmp + S[s].upper())
            elif S[s].isupper():
                backtrack(s+1, tmp +S[s])
                backtrack(s+1, tmp+S[s].lower())
        backtrack(0,"")
        return result
 。isdigit() .isupper() .islower() 都很秀，所以我觉得难在这样的地方。
 其他代码上的问题是这样的。定义一个函数，包括两个变量，一个是题目给的变量，另一个是我们每一步更新的结果，所以这样的题目都是大概这样的思路。
 
 943 超级最短串
 看不懂答案，其实也好想，但是有时间在搞这个块把！
 
 996：题目不难，但是代码错了为啥呢
 class Solution(object):
    def numSquarefulPerms(self, A):
        nums = A
        nums.sort()
        res = []
        def backtrack(nums, tmp):
            if not nums:
                res.append(tmp)
                return 
            for i in range(len(nums)):
                # 去重
                if i and nums[i]==nums[i-1]:
                    continue
                # 剪枝
                if not tmp or math.sqrt(tmp[-1]+nums[i]) % 1 == 0:
                    backtrack(nums[:i] + nums[i+1:], tmp + [nums[i]])
        backtrack(nums, [])
        return len(res)
源代码
class Solution:
    def numSquarefulPerms(self, A: List[int]) -> int:
        result = []
        A.sort ====================================================================找到错误了，没加括号，看来排序也很最重要！！！！
        l = len(A)
        def backtrack(nums, tmp):
            if not nums:
                result.append(tmp)
            for i, j in enumerate(nums):
                if i and nums[i]==nums[i-1]:
                    continue
                if not tmp or math.sqrt(tmp[-1]+nums[i]) % 1 == 0:
                    backtrack(nums[:i]+nums[i+1:], tmp+[j])
        backtrack(A,[])
        return len(result)
我的代码。。
感觉完全一样呢，，，，，
就是一个全排列+去重+剪枝。。 做这样的题目最好sort一下。。。
